{"ast":null,"code":"import api from './api';\n// Lấy tất cả kết quả đăng ký chặng đua\nexport const getRaceEntriesByRaceStageId = async raceStageId => {\n  try {\n    const response = await api.get(`/race-entries/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race entries for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n// Lấy tất cả kết quả đua theo id chặng đua\nexport const getRaceResultsByRaceStageId = async raceStageId => {\n  try {\n    const response = await api.get(`/race-results/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n// Cập nhật kết quả đua\nexport const updateRaceResults = async (raceStageId, seasonId, results) => {\n  try {\n    // Chuyển đổi dữ liệu sang định dạng mới\n    const convertedResults = results.map(result => {\n      return {\n        id: result.id,\n        raceStage: {\n          id: raceStageId\n        },\n        driver: {\n          id: result.driverId,\n          fullName: result.driverName\n        },\n        team: {\n          id: result.teamId,\n          name: result.teamName\n        },\n        season: {\n          id: seasonId\n        },\n        gridPosition: result.gridPosition,\n        finishPosition: result.finishPosition,\n        points: result.points,\n        status: result.status,\n        finishTimeOrGap: result.finishTimeOrGap,\n        lapsCompleted: result.lapsCompleted\n      };\n    });\n    console.log('Sending race results with object structure:', convertedResults);\n\n    // Dùng endpoint mới\n    const response = await api.post(`/race-results/update`, convertedResults);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getRaceEntriesByRaceStageId","raceStageId","response","get","data","error","console","getRaceResultsByRaceStageId","updateRaceResults","seasonId","results","convertedResults","map","result","id","raceStage","driver","driverId","fullName","driverName","team","teamId","name","teamName","season","gridPosition","finishPosition","points","status","finishTimeOrGap","lapsCompleted","log","post"],"sources":["C:/Users/ADMIN/Desktop/BTL_KTPM/f1-management-system/f1-management-frontend/src/services/raceResultService.js"],"sourcesContent":["import api from './api';\n// Lấy tất cả kết quả đăng ký chặng đua\nexport const getRaceEntriesByRaceStageId = async (raceStageId) => {\n  try {\n    const response = await api.get(`/race-entries/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race entries for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n// Lấy tất cả kết quả đua theo id chặng đua\nexport const getRaceResultsByRaceStageId = async (raceStageId) => {\n  try {\n    const response = await api.get(`/race-results/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n// Cập nhật kết quả đua\nexport const updateRaceResults = async (raceStageId, seasonId, results) => {\n  try {\n    // Chuyển đổi dữ liệu sang định dạng mới\n    const convertedResults = results.map(result => {\n      return {\n        id: result.id,\n        raceStage: {\n          id: raceStageId\n        },\n        driver: {\n          id: result.driverId,\n          fullName: result.driverName\n        },\n        team: {\n          id: result.teamId,\n          name: result.teamName\n        },\n        season: {\n          id: seasonId\n        },\n        gridPosition: result.gridPosition,\n        finishPosition: result.finishPosition,\n        points: result.points,\n        status: result.status,\n        finishTimeOrGap: result.finishTimeOrGap,\n        lapsCompleted: result.lapsCompleted\n      };\n    });\n    \n    console.log('Sending race results with object structure:', convertedResults);\n    \n    // Dùng endpoint mới\n    const response = await api.post(`/race-results/update`, convertedResults);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB;AACA,OAAO,MAAMC,2BAA2B,GAAG,MAAOC,WAAW,IAAK;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,4BAA4BF,WAAW,EAAE,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAME,2BAA2B,GAAG,MAAON,WAAW,IAAK;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,4BAA4BF,WAAW,EAAE,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAAA,CAAOP,WAAW,EAAEQ,QAAQ,EAAEC,OAAO,KAAK;EACzE,IAAI;IACF;IACA,MAAMC,gBAAgB,GAAGD,OAAO,CAACE,GAAG,CAACC,MAAM,IAAI;MAC7C,OAAO;QACLC,EAAE,EAAED,MAAM,CAACC,EAAE;QACbC,SAAS,EAAE;UACTD,EAAE,EAAEb;QACN,CAAC;QACDe,MAAM,EAAE;UACNF,EAAE,EAAED,MAAM,CAACI,QAAQ;UACnBC,QAAQ,EAAEL,MAAM,CAACM;QACnB,CAAC;QACDC,IAAI,EAAE;UACJN,EAAE,EAAED,MAAM,CAACQ,MAAM;UACjBC,IAAI,EAAET,MAAM,CAACU;QACf,CAAC;QACDC,MAAM,EAAE;UACNV,EAAE,EAAEL;QACN,CAAC;QACDgB,YAAY,EAAEZ,MAAM,CAACY,YAAY;QACjCC,cAAc,EAAEb,MAAM,CAACa,cAAc;QACrCC,MAAM,EAAEd,MAAM,CAACc,MAAM;QACrBC,MAAM,EAAEf,MAAM,CAACe,MAAM;QACrBC,eAAe,EAAEhB,MAAM,CAACgB,eAAe;QACvCC,aAAa,EAAEjB,MAAM,CAACiB;MACxB,CAAC;IACH,CAAC,CAAC;IAEFxB,OAAO,CAACyB,GAAG,CAAC,6CAA6C,EAAEpB,gBAAgB,CAAC;;IAE5E;IACA,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACiC,IAAI,CAAC,sBAAsB,EAAErB,gBAAgB,CAAC;IACzE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}