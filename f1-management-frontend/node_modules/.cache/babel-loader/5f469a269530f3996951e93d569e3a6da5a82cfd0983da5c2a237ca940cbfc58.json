{"ast":null,"code":"import api from './api';\n// Lấy tất cả kết quả đăng ký chặng đua\nexport const getRaceEntriesByRaceStageId = async raceStageId => {\n  try {\n    const response = await api.get(`/race-entries/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race entries for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n\n// Lấy tất cả kết quả đua theo đối tượng RaceStage \nexport const getRaceResultsByRaceStage = async raceStage => {\n  try {\n    const response = await api.post('/race-results/race-stage', raceStage);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race results for race stage ${raceStage.id}:`, error);\n    throw error;\n  }\n};\n\n// Giữ lại phương thức cũ để tương thích ngược\nexport const getRaceResultsByRaceStageId = async raceStageId => {\n  try {\n    const response = await api.get(`/race-results/race-stage/${raceStageId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};\n\n// Cập nhật kết quả đua - sử dụng phương thức theo hướng đối tượng\nexport const updateRaceResults = async (raceStageId, seasonId, results) => {\n  try {\n    // Chuyển đổi dữ liệu sang định dạng thích hợp với hướng đối tượng\n    const raceStageRef = {\n      id: raceStageId,\n      season: {\n        id: seasonId\n      }\n    };\n    const convertedResults = results.map(result => {\n      return {\n        id: result.id,\n        raceStage: raceStageRef,\n        driverTeamAssignment: {\n          id: result.driverTeamAssignmentId,\n          driver: {\n            id: result.driverId,\n            fullName: result.driverName\n          },\n          team: {\n            id: result.teamId,\n            name: result.teamName\n          }\n        },\n        season: {\n          id: seasonId\n        },\n        gridPosition: result.gridPosition,\n        finishPosition: result.finishPosition,\n        points: result.points,\n        status: result.status,\n        finishTimeOrGap: result.finishTimeOrGap,\n        lapsCompleted: result.lapsCompleted\n      };\n    });\n    console.log('Sending race results with object structure:', convertedResults);\n\n    // Dùng endpoint mới\n    const response = await api.post(`/race-results/update`, convertedResults);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating race results for race stage ${raceStageId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getRaceEntriesByRaceStageId","raceStageId","response","get","data","error","console","getRaceResultsByRaceStage","raceStage","post","id","getRaceResultsByRaceStageId","updateRaceResults","seasonId","results","raceStageRef","season","convertedResults","map","result","driverTeamAssignment","driverTeamAssignmentId","driver","driverId","fullName","driverName","team","teamId","name","teamName","gridPosition","finishPosition","points","status","finishTimeOrGap","lapsCompleted","log"],"sources":["C:/Users/ADMIN/Desktop/KTPM/BTL_KTTKPM_PTIT/f1-management-frontend/src/services/raceResultService.js"],"sourcesContent":["import api from './api';\r\n// Lấy tất cả kết quả đăng ký chặng đua\r\nexport const getRaceEntriesByRaceStageId = async (raceStageId) => {\r\n  try {\r\n    const response = await api.get(`/race-entries/race-stage/${raceStageId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching race entries for race stage ${raceStageId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Lấy tất cả kết quả đua theo đối tượng RaceStage \r\nexport const getRaceResultsByRaceStage = async (raceStage) => {\r\n  try {\r\n    const response = await api.post('/race-results/race-stage', raceStage);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching race results for race stage ${raceStage.id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Giữ lại phương thức cũ để tương thích ngược\r\nexport const getRaceResultsByRaceStageId = async (raceStageId) => {\r\n  try {\r\n    const response = await api.get(`/race-results/race-stage/${raceStageId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching race results for race stage ${raceStageId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cập nhật kết quả đua - sử dụng phương thức theo hướng đối tượng\r\nexport const updateRaceResults = async (raceStageId, seasonId, results) => {\r\n  try {\r\n    // Chuyển đổi dữ liệu sang định dạng thích hợp với hướng đối tượng\r\n    const raceStageRef = {\r\n      id: raceStageId,\r\n      season: {\r\n        id: seasonId\r\n      }\r\n    };\r\n\r\n    const convertedResults = results.map(result => {\r\n      return {\r\n        id: result.id,\r\n        raceStage: raceStageRef,\r\n        driverTeamAssignment: {\r\n          id: result.driverTeamAssignmentId,\r\n          driver: {\r\n            id: result.driverId,\r\n            fullName: result.driverName\r\n          },\r\n          team: {\r\n            id: result.teamId,\r\n            name: result.teamName\r\n          }\r\n        },\r\n        season: {\r\n          id: seasonId\r\n        },\r\n        gridPosition: result.gridPosition,\r\n        finishPosition: result.finishPosition,\r\n        points: result.points,\r\n        status: result.status,\r\n        finishTimeOrGap: result.finishTimeOrGap,\r\n        lapsCompleted: result.lapsCompleted\r\n      };\r\n    });\r\n    \r\n    console.log('Sending race results with object structure:', convertedResults);\r\n    \r\n    // Dùng endpoint mới\r\n    const response = await api.post(`/race-results/update`, convertedResults);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating race results for race stage ${raceStageId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB;AACA,OAAO,MAAMC,2BAA2B,GAAG,MAAOC,WAAW,IAAK;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,4BAA4BF,WAAW,EAAE,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,yBAAyB,GAAG,MAAOC,SAAS,IAAK;EAC5D,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,0BAA0B,EAAED,SAAS,CAAC;IACtE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CG,SAAS,CAACE,EAAE,GAAG,EAAEL,KAAK,CAAC;IACnF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,2BAA2B,GAAG,MAAOV,WAAW,IAAK;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,4BAA4BF,WAAW,EAAE,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG,MAAAA,CAAOX,WAAW,EAAEY,QAAQ,EAAEC,OAAO,KAAK;EACzE,IAAI;IACF;IACA,MAAMC,YAAY,GAAG;MACnBL,EAAE,EAAET,WAAW;MACfe,MAAM,EAAE;QACNN,EAAE,EAAEG;MACN;IACF,CAAC;IAED,MAAMI,gBAAgB,GAAGH,OAAO,CAACI,GAAG,CAACC,MAAM,IAAI;MAC7C,OAAO;QACLT,EAAE,EAAES,MAAM,CAACT,EAAE;QACbF,SAAS,EAAEO,YAAY;QACvBK,oBAAoB,EAAE;UACpBV,EAAE,EAAES,MAAM,CAACE,sBAAsB;UACjCC,MAAM,EAAE;YACNZ,EAAE,EAAES,MAAM,CAACI,QAAQ;YACnBC,QAAQ,EAAEL,MAAM,CAACM;UACnB,CAAC;UACDC,IAAI,EAAE;YACJhB,EAAE,EAAES,MAAM,CAACQ,MAAM;YACjBC,IAAI,EAAET,MAAM,CAACU;UACf;QACF,CAAC;QACDb,MAAM,EAAE;UACNN,EAAE,EAAEG;QACN,CAAC;QACDiB,YAAY,EAAEX,MAAM,CAACW,YAAY;QACjCC,cAAc,EAAEZ,MAAM,CAACY,cAAc;QACrCC,MAAM,EAAEb,MAAM,CAACa,MAAM;QACrBC,MAAM,EAAEd,MAAM,CAACc,MAAM;QACrBC,eAAe,EAAEf,MAAM,CAACe,eAAe;QACvCC,aAAa,EAAEhB,MAAM,CAACgB;MACxB,CAAC;IACH,CAAC,CAAC;IAEF7B,OAAO,CAAC8B,GAAG,CAAC,6CAA6C,EAAEnB,gBAAgB,CAAC;;IAE5E;IACA,MAAMf,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,sBAAsB,EAAEQ,gBAAgB,CAAC;IACzE,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8CAA8CJ,WAAW,GAAG,EAAEI,KAAK,CAAC;IAClF,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}